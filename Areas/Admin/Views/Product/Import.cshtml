@model ELabel.ViewModels.ImportFileUpload

@{
    ViewData["Title"] = "Import";
}

<h2>Import</h2>

<h4>Products</h4>
<hr />
<div class="row">
    <div class="col-md-6">
        <form method="post" enctype="multipart/form-data" asp-action="Import">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            @Html.ValidationMessage("CustomError", new { @class = "text-danger" })
            <div class="mb-3">
                <label asp-for="File" class="form-label"></label>
                <input asp-for="File" class="form-control" accept=".xlsx" aria-describedby="FileHelp" />
                <div id="FileHelp" class="form-text">@ViewData.ModelMetadata.Properties.Where(m => m.PropertyName == "File").FirstOrDefault()?.Description</div>
                <span asp-validation-for="File" class="text-danger"></span>
            </div>
            <div class="mb-3">
                <input type="submit" value="Upload" class="btn btn-primary" />
            </div>
        </form>
    </div>

    <div class="col-md-6 col-md-offset-2">

        <div class="p-3 bg-light rounded-3">
            <h3>Backup and Restore</h3>
            <p>You can use this import to restore a backup (export) you have made previously.</p>
            <p>Products with the same identification will be updated and new products will be added.</p>
        </div>

        <br/>

        <div class="p-3 bg-light rounded-3">
            <h3>Excel file</h3>
            <p>This expects the Excel file to contain a header row with the column names.</p>
            <p>Objects are read from the first worksheet. If the column names equal the property names (ignoring case) no other configuration is necessary.
            <p>The format of the Excel file (xlsx or xls) is autodetected.</p>
        </div>

    </div>

</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
